#Göktuğ Ekinci 2380343
.pos 0
irmovq Stack,%rsp
irmovq root,%rdi
call max_btree
halt



max_btree:
    irmovq 0xf000000000000000, %rbx
    
    
    andq %rdi,%rdi
    je rstat
looptwo:
    mrmovq (%rdi),%rbx #max  = root
    
    rrmovq %rdi,%r8 #backup of root so that we don't lose it
    
    mrmovq 8(%r8),%rdi #go for left child
    pushq %r8
    pushq %rbx
    call max_btree # get the left child value with recursion
    rrmovq %rax,%r10 #temp register r10
    popq %rbx
    popq %r8
    subq %rbx,%r10
    jle childisnotgreater
    rrmovq %rax,%rbx
childisnotgreater:
    mrmovq 16(%r8),%rdi #go for right child
    pushq %r8
    pushq %rbx
    call max_btree # get the right child value with recursion
    rrmovq %rax,%r10 #temp register r10
    popq %rbx
    popq %r8
    
    subq %rbx,%rax
    cmovge %r10,%rbx
rstat:
    rrmovq %rbx,%rax
    ret









# A binary (not search!) tree,
# absolutely positioned again.
.pos 0x200
root:
    .quad 5
    .quad node7
    .quad node12
node7:
    .quad 7
    .quad node25
    .quad node905
node25:
    .quad 25
    .quad 0
    .quad 0
node905:
    .quad 905
    .quad nodem1
    .quad 0
nodem1:
    .quad -1
    .quad 0
    .quad 0
node12:
    .quad 12
    .quad node219
    .quad nodem10
node219:
    .quad 219
    .quad 0
    .quad 0
nodem10:
    .quad -10
    .quad 0
    .quad node331
node331:
    .quad 331
    .quad 0
    .quad 0
    
    


.pos 0x600
Stack:











